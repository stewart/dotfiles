snippet import
import (
	"${1:package}"
)
endsnippet

snippet pkg
package ${1:main}
endsnippet

snippet cons
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet for
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet forr
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet if
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet select
select {
case${0}
}
endsnippet

snippet case
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet default
default:
	${0:${VISUAL}}
endsnippet

# functions
snippet main
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet method
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet map
map[${1:keytype}]${2:valtype}
endsnippet

snippet :
${1:name} := ${0:value}
endsnippet

snippet var
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json
\`json:"${1:displayName}"\`
endsnippet
