" .vimrc
" Author: Andrew Stewart <andrew@stwrt.ca>
" Source: https://github.com/stewart/dotfiles/tree/master/vim

" Preamble ---------------------------------------------------------------- {{{

filetype off
filetype plugin indent on

" }}}
" Plugins ------------------------------------------------------------------ {{{

call plug#begin('~/.vim/plugged')

" basics
Plug 'Raimondi/delimitMate'
Plug 'austintaylor/vim-indentobject'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tmhedberg/matchit'

" filetypes
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'lambdatoast/elm.vim', { 'for': 'elm' }
Plug 'mxw/vim-jsx'
Plug 'nono/vim-handlebars'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-haml'
Plug 'leafgarland/typescript-vim'
Plug 'wting/rust.vim'

" helpers
Plug 'AndrewRadev/splitjoin.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'sjl/gundo.vim'
Plug 'tommcdo/vim-exchange'
Plug 'tomtom/tcomment_vim'
Plug 'tsaleh/vim-align'
Plug 'tudorprodan/html_annoyance.vim'

" tpope
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-classpath', { 'for': ['clojure', 'java'] }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rails', { 'on': 'Rails' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': ['clojure'] }

call plug#end()

" }}}
" Statusline --------------------------------------------------------------- {{{

set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" }}}
" Basic options ----------------------------------------------------------- {{{
"
set noai
set nosi
set autowrite
set t_Co=256
set backupskip=/tmp/*,/private/tmp/*"
set colorcolumn=80
set completeopt=longest,menuone,preview
set complete=.,w,b,u,t
set clipboard+=unnamed,unnamedplus
set exrc
set fillchars=diff:⣿,vert:│
set hidden
set nojoinspaces
set lazyredraw
set linebreak
set list
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮
set matchtime=3
set modelines=0
set noerrorbells
set noshowcmd
set notimeout
set novisualbell
set ruler
set shiftround
set showbreak=↪
set sidescroll=1
set sidescrolloff=10
set showtabline=2
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add
set splitbelow
set splitright
set synmaxcol=800
set switchbuf=useopen
set title
set ttimeout
set ttimeoutlen=10
set undofile
set undoreload=10000
set virtualedit+=block
set mouse=a
set t_ti= t_te=   " makes vim play nice with terminal scrollback

" Resize splits when the window is resized
au VimResized * :wincmd =

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest,full

set wildignore+=.hg,.git,.svn
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.DS_Store

set wildignore+=migrations
set wildignore+=*.pyc

set wildignore+=classes
set wildignore+=lib

" }}}
" Line Return {{{

augroup line_return
    au!
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

augroup END

" }}}
" Tabs, spaces, wrapping {{{

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set nosmarttab
set textwidth=80
set formatoptions=qrn1j
set nowrap
set whichwrap+=<,>,h,l,[,]      " backspace and cursor keys wrap to

" }}}
" Backups {{{

set backup
set noswapfile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}
" Leader {{{

let mapleader = ","
let maplocalleader = "\\"

" }}}
" Colorscheme Font, and Guioptions {{{

colorscheme dark
set background=dark
set guifont=Inconsolata-dz\ for\ PowerLine:h12
set guioptions-=T
set guioptions-=m
set guioptions=aAce
syntax on

" }}}
"
" }}}
" Convenience mappings ---------------------------------------------------- {{{

" Select last pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

nnoremap <leader>` :set cursorline!<cr>:set cursorcolumn!<cr>

" Gundo
nnoremap <Leader>u :GundoToggle<CR>

" Toggle numbers 
nnoremap <Leader>n :set invnumber invrelativenumber<CR>

" nvim stuff
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" 'normal' vim stuff
if !has('nvim')
  set nocompatible
  set autoread
  set backspace=indent,eol,start
  set encoding=utf-8
  set history=1000
  set laststatus=2
  set ttyfast
  set incsearch
  set hlsearch
endif

" keep the cursor in place while joining lines
nnoremap J mzJ`z

" split line
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w 

" Set newline commands to return to normal mode
nmap o o<Esc>
nmap O O<Esc>

" Write as sudo
cmap w!! %!sudo tee > /dev/null %

" Shortcut to previous file
map <leader><leader> <c-^>

" Shortcut to run Make
map <leader>ma :!make<cr>

" Resize splits/windows
nnoremap <right>  :3wincmd <<cr>
nnoremap <left> :3wincmd ><cr>
nnoremap <up>    :3wincmd +<cr>
nnoremap <down>  :3wincmd -<cr>

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Open Markdown previews in Marked.app
nnoremap <leader>md :silent !open -a Marked.app '%:p'<cr>

" Make finding marks easier
noremap ' `

" Go to beginning or end of line
nnoremap H ^
nnoremap L g_

" Clear trailing whitespace
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" sane movement with wrap turned on
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk

" Select all
nnoremap vaa ggvGg_
nnoremap Vaa ggVG

" Easier to press
nmap <tab> %
vmap <tab> %

" Reformat line.
nnoremap ql gqq

" Make Y behave like other capitals
nnoremap Y y$

" fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV
nnoremap Va} va}V
nnoremap Vi} vi}V

" made D behave
nnoremap D d$

" Open current file and line on github
nnoremap <leader>gh :Gbrowse<cr>

" Open a vsplit
noremap <leader>v <C-w>v

" Show syntax highlighting tokens for token under cursor
map <leader>s :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Formatting, TextMate-style
nnoremap Q gqip
vnoremap Q gq

" Easy filetype switching {{{
nnoremap _md   :set ft=markdown<CR>
nnoremap _php  :set ft=php<CR>
nnoremap _js   :set ft=javascript<CR>
nnoremap _html :set ft=html<CR>
nnoremap _erb  :set ft=eruby<CR>
nnoremap _rb   :set ft=ruby<CR>
nnoremap _v    :set ft=vim<CR>

" }}}
" Insert Mode Completion {{{
inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>

" }}}
" BufferOnly {{{

command! -nargs=? -complete=buffer -bang Bonly
    \ :call BufOnly('<args>', '<bang>')

" }}}

" }}}
" Searching and movement -------------------------------------------------- {{{

set ignorecase
set smartcase
set showmatch
set gdefault

" Centers search results
map N Nzz
map n nzz

" Clear search buffer on return
nnoremap <CR> :nohlsearch<cr>

" }}}
" Folds ------------------------------------------------------------------- {{{

set foldmethod=manual
set nofoldenable

"}}}
" Tags ------------------------------------------------------------------- {{{

set tags=./.git/tags,./tags,tags

"}}}
" Filetype-specific ------------------------------------------------------- {{{

" stwrt.ca blog entries {{{

augroup ft_blog_post
    au!
    au BufRead,BufNewFile */dev/blog/* map ,rt :!hugo &>/dev/null<cr><cr>
augroup END

" }}}
" Clojure {{{

augroup ft_clojure
    au!
    set wildignore+=classes
    set wildignore+=lib
    au Filetype clojure nnoremap <leader>e :Eval<cr>
    au Filetype clojure nnoremap <leader>E :%Eval<cr>
augroup END

" }}}
" Wisp {{{

augroup ft_wisp
    au!
    au BufNewFile,BufRead *.wisp setlocal filetype=clojure
augroup END

" }}}
"
" Pixie {{{

augroup ft_pixie
    au!
    au BufNewFile,BufRead *.pixie,*.pxi setlocal filetype=clojure
augroup END

" }}}
" Javascript {{{

augroup ft_javascript
    au!

    au Filetype javascript nnoremap L :!eslint %<cr>

    au Filetype javascript map <leader>t :!make<cr>

    au BufNewFile,BufRead *.jshintrc setlocal filetype=json

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au Filetype javascript inoremap <buffer> {<cr> {}<left><cr><space><space>.<cr><esc>kA<bs>
augroup END

" }}}
" YAML {{{

augroup ft_yaml
    au!

    au BufNewFile,BufRead *.eslintrc setlocal filetype=yaml
augroup END

" }}}
" Markdown {{{

augroup ft_markdown
    au!

    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=markdown
    au BufNewFile,BufRead *.md,*.markdown setlocal textwidth=0
    au BufNewFile,BufRead *.md,*.markdown setlocal syntax=off

    " Use <localleader>1/2/3 to add headings.
    au Filetype markdown nnoremap <buffer> <localleader>1 yypVr=
    au Filetype markdown nnoremap <buffer> <localleader>2 yypVr-
    au Filetype markdown nnoremap <buffer> <localleader>3 I### <ESC>
augroup END
" }}}
" PHP {{{

augroup ft_php
    au!

    au FileType php,phtml setlocal makeprg=php\ -l\ %
    au FileType php,phtml setlocal errorformat=%m\ in\ %f\ on\ line\ %l
augroup END

" }}}
" Python {{{

augroup ft_python
    au!

    au Filetype python setlocal tabstop=4 shiftwidth=4 softtabstop=4
augroup END

" }}}
" C {{{

augroup ft_c
    au!

    au Filetype c setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au Filetype c setlocal listchars+=tab:\ \ 
augroup END

" }}}
" C# {{{

augroup ft_cs
    au!

    au filetype cs setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au filetype cs setlocal listchars+=tab:\ \ 
augroup END

" }}}
" Elixir {{{

augroup ft_elixir
    au!

    au Filetype elixir map <leader>rt :!mix test<cr>
augroup END

" }}}
" Golang {{{

let g:go_fmt_command = "goimports"

augroup ft_go
    au!

    au Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au Filetype go setlocal listchars+=tab:\ \ 

    au Filetype go nnoremap <leader>d :vsp <CR>:exe "GoDef" <CR>
    au Filetype go nnoremap <leader>rt :exe "GoTest"<cr>
    au Filetype go nnoremap <leader>ru :exe "GoRun"<cr>
    au Filetype go nnoremap <leader>b :exe "GoBuild"<cr>
augroup END

" }}}
" Makefiles {{{

augroup ft_makefile
    au!

    au Filetype make setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au Filetype make setlocal listchars+=tab:\ \ 
augroup END

" }}}
" C++ {{{

augroup ft_cpp
    au!

    au Filetype cpp setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
    au Filetype cpp setlocal listchars+=tab:\ \ 
augroup END

" }}}
" Coffeescript {{{

augroup ft_coffee
    au!

    au Filetype coffee,javascript set path+=./lib,./app/assets/javascripts,./src
augroup END

" }}}
" Ruby {{{

augroup ft_ruby
    au!

    au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Thorfile,Vagrantfile,config.ru,.caprc,.irbrc} set ft=ruby
    au Filetype ruby setlocal path+=./lib,./app/models,./app/controllers
    au Filetype ruby nnoremap L :!ruby -c %<cr>
augroup END

" }}}
" Vim {{{

augroup ft_vim
    au!

    au FileType vim setlocal textwidth=80
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}

" }}}
" Plugin settings --------------------------------------------------------- {{{

" FZY {{{

" Easier mappings for searches
nnoremap <leader>. :call SelectTag()<cr>
nnoremap <leader>f :call SelectFile("")<cr>
nnoremap <leader>gg :call SelectFileWithoutExclude("")<cr>
nnoremap <leader>gm :call SelectFile("./app/models/")<cr>
nnoremap <leader>gc :call SelectFile("./app/controllers/")<cr>
nnoremap <leader>ga :call SelectFile("./app/assets/")<cr>
nnoremap <leader>gv :call SelectFile("./app/views/")<cr>
nnoremap <leader>gd :call SelectFile("./db/")<cr>
nnoremap <leader>gf :call SelectFile("./features/")<cr>
nnoremap <leader>gl :call SelectFile("./lib/")<cr>
nnoremap <leader>gs :call SelectFile("./spec/")<cr>
nnoremap <leader>gt :call SelectFile("./test/")<cr>
nnoremap <leader>gp :call SelectFile("./public/")<cr>
nnoremap <leader>b :call SelectBuffer()<cr>

" }}}
" T-Comment {{{

map <Leader>c <c-_><c-_>

"}}}
" }}}
" Text objects ------------------------------------------------------------ {{{

" Numbers {{{

" Motion for numbers.  Great for CSS.  Lets you do things like this:
"
" margin-top: 200px; -> daN -> margin-top: px;
"              ^                          ^
" TODO: Handle floats.

onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>

function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction

" }}}

" }}}
" Functions--------------------------------------------------------- {{{

function! s:CopyMotionForType(type) " {{{
    if a:type ==# 'v'
        silent execute "normal! `<" . a:type . "`>y"
    elseif a:type ==# 'char'
        silent execute "normal! `[v`]y"
    endif
endfunction " }}}
function! BufOnly(buffer, bang) " {{{
  if a:buffer == ''
    " No buffer provided, use the current buffer.
    let buffer = bufnr('%')
  elseif (a:buffer + 0) > 0
    " A buffer number was provided.
    let buffer = bufnr(a:buffer + 0)
  else
    " A buffer name was provided.
    let buffer = bufnr(a:buffer)
  endif

  if buffer == -1
    echohl ErrorMsg
    echomsg "No matching buffer for" a:buffer
    echohl None
    return
  endif

  let last_buffer = bufnr('$')

  let delete_count = 0
  let n = 1
  while n <= last_buffer
    if n != buffer && buflisted(n)
      if a:bang == '' && getbufvar(n, '&modified')
        echohl ErrorMsg
        echomsg 'No write since last change for buffer'
              \ n '(add ! to override)'
        echohl None
      else
        silent exe 'bdel' . a:bang . ' ' . n
        if ! buflisted(n)
          let delete_count = delete_count+1
        endif
      endif
    endif
    let n = n+1
  endwhile

  if delete_count == 1
    echomsg delete_count "buffer deleted"
  elseif delete_count > 1
    echomsg delete_count "buffers deleted"
  endif

endfunction " }}}
function! RenameFile() " {{{
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction " }}}
function! SendToFIFO(command) " {{{
" sends command to FIFO living in /tmp
   silent! exec ":!echo '" . a:command . "' > /tmp/fifo"
endfunction " }}}
function! SelectCommand(choice_command, select_args, vim_command) "{{{
" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
  try
    let selection = system(a:choice_command . " | fzy " . a:select_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from fzy on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction "}}}
function! SelectFile(dir_name) "{{{
  let command = "find " . a:dir_name . "* -maxdepth 15 -type f -or -type l | egrep -v '^(node_modules|vendor/bundle|_build)' | sort -u"
  call SelectCommand(command, "", ":e")
endfunction " }}}
function! SelectFileWithoutExclude(dir_name) "{{{
  let command = "find " . a:dir_name . "* -maxdepth 15 -type f -or -type l | sort -u"
  call SelectCommand(command, "", ":e")
endfunction " }}}
function! SelectTag() "{{{
  let command = "awk '{print $1}' tags | sort -u | grep -v '^!'"
  call SelectCommand(command, "", ":tag")
endfunction " }}}
function! SelectBuffer() "{{{
  let buffers = map(range(1, bufnr("$")), 'bufname(bufnr(v:val))')
  call SelectCommand('echo "' . join(buffers, "\n") . '"', "", ":b")
endfunction " }}}
function! s:ExecuteInShell(command, bang) " {{{
  let s:_ = ''
  let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

  if (_ != '')
    let s:_ = _
    let bufnr = bufnr('%')
    let winnr = bufwinnr('^' . _ . '$')
    silent! execute  winnr < 0 ? 'botright vnew ' . fnameescape(_) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile
    silent! :%d
    let message = 'Execute ' . _ . '...'
    call append(0, message)
    echo message
    silent! 2d | redraw
    silent! execute 'silent! %!'. _
    silent! execute 'syntax on'
    silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
    silent! execute 'nnoremap <silent> <buffer> <CR> :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    silent! syntax on
  endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell
" }}}

" }}}

" source local vimrc modifications, if present
let s:local_vimrc = $HOME . "/.vimrc.local"
if filereadable(s:local_vimrc)
    execute 'source ' . s:local_vimrc
endif

" source localrc if available
if filereadable(glob("~/.vimrc.local")) 
    source ~/.vimrc.local
endif

" Prevent project vimrc files from damaging stuff
set secure
