call pathogen#infect()          " Call pathogen
set noswapfile                  " Who needs swapfiles, anyways?
set nocompatible                " Don't want to be compatible with vi

" ----------------------------------------------------------
" Text Formatting
" ----------------------------------------------------------
set autoindent                  " automagically indent new lines
set smartindent                 " be smart about it
inoremap # X<BS>#
set wrap                        " wrap lines
set softtabstop=2               " four spaces? yeah right.
set shiftwidth=2                " see above.
set tabstop=2
set expandtab                   " tabs to spaces
set nosmarttab                  " fuck off, tabs
set formatoptions+=n            " add support for numbered/bulleted lists
set virtualedit=block           " allow virtual edit in visual block
set clipboard=unnamed
set scrolljump=5
set scrolloff=5
set cursorline
set history=10000

" ----------------------------------------------------------
" Interface
" ----------------------------------------------------------
set ruler                       " show the ruler at all times.
set noshowcmd                   " don't show incomplete commands
set nolazyredraw                " turn off lazy redraw
set number                      " turn on line numbers
set wildmode=list:longest,full
set wildmenu                    " turn on wildmenu
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,]      " backspace and cursor keys wrap to
set shortmess=filtIoOA          " shorten messages
set report=0                    " tell us about changes
set nostartofline               " don't jump to the start of line when scrolling

if has("gui_running")
  colorscheme solarized       " colorscheme
  let g:solarized_termcolors=256
  set background=dark
endif

set guifont=Inconsolata-dz\ for\ PowerLine:h14 " best goddamn terminal font around
set guioptions-=T                              " strip MacVim/GVim chrome
set guioptions-=m                              " ...
set guioptions=aAce                            " ...

set list
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮

set noerrorbells
set novisualbell
set noshowmatch                 " vim, kindly shut up about my >'s.
set t_vb=

" Statusline
set laststatus=2
let g:Powerline_symbols='fancy'

" Syntax hightlighing
filetype on
filetype indent on
filetype plugin on
syntax enable
syntax on

" Multi-line comments in PHP
au BufRead,BufNewFile *.php set comments=s1:/*,mb:*,ex:*/,://,:#

" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif

" ----------------------------------------------------------
" Remappings
" ----------------------------------------------------------

let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" ; acts as : in normal mode:
nmap ; :

" Set newline commands to return to insert mode
nmap o o<Esc>
nmap O O<Esc>

" Change window splits easily
map <C-J> <C-w><C-j>
map <C-K> <C-w><C-k>
map <C-h> <C-w><C-h>
map <C-l> <C-w><C-l>

map <Leader>n :NERDTree<CR>

" Shortcut for T-Comment
map <Leader>c <c-_><c-_>

" Write as sudo
cmap w!! %!sudo tee > /dev/null %

" Use space key to toggle folds
nnoremap <Space> za
vnoremap <Space> za

" Make find/replace easier
nnoremap <leader>s :%s//g<left><left>

" Centers search results
map N Nzz
map n nzz

" Clear search buffer on return
nnoremap <cr> :nohlsearch<cr>

" Open Markdown previews in Marked.app
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

imap <c-p> <c-x><c-o>

" Call the StripWhitespace function
map <Leader>s :call StripWhitespace ()<CR>

" C-TAB and C-SHIFT-TAB cycle tabs forward and backward
nmap <c-tab> :tabnext<cr>
imap <c-tab> <c-o>:tabnext<cr>
vmap <c-tab> <c-o>:tabnext<cr>
nmap <c-s-tab> :tabprevious<cr>
imap <c-s-tab> <c-o>:tabprevious<cr>
vmap <c-s-tab> <c-o>:tabprevious<cr>

" sane movement with wrap turned on
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk

" Alternate between two and four space indentation
nnoremap <leader>2 :setlocal shiftwidth=2 tabstop=2 softtabstop=2<cr>
nnoremap <leader>4 :setlocal shiftwidth=4 tabstop=4 softtabstop=4<cr>

" Ackmate
nnoremap <leader>a :Ack

" Map to switch between absolute and relative line numbers
nnoremap <C-n> :call NumberToggle()<cr>

map <leader>rf :call RenameFile()<cr>

" Make Y behave like other capitals
nnoremap Y y$
"
" ----------------------------------------------------------
" Searching
" ----------------------------------------------------------
set incsearch              " do incremental searching
set hlsearch               " highlight searches
set ignorecase smartcase   " ignore case when searching, unless it contains uppercase characters

" ----------------------------------------------------------
" Plugins
" ----------------------------------------------------------

" NERDTree
let NERDTreeShowHidden=0
let NERDTreeIgnore=['\.rbc$', '\~$', '.git/']
map <Leader>n :NERDTree<CR>

" LustyJuggler
let g:LustyJugglerAltTabMode = 1
noremap <silent> <Leader><Tab> :LustyJuggler<CR>

" Ctrlp
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_max_files = 10000
let g:ctrlp_working_path_mode = 0

if has("unix")
    let g:ctrlp_user_command = {'types': {1: ['.git/', 'cd %s && git ls-files']},'fallback': 'find %s -type f | head -' . g:ctrlp_max_files}
endif

" ---------------------------------------------------------------------------
"  Functions
" ---------------------------------------------------------------------------

" Strip whitespace in file
function! StripWhitespace ()
  exec ':%s/ \+$//g'
endfunction

" Toggle relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

" Rename Current File
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" ---------------------------------------------------------------------------
"  Misc
" ---------------------------------------------------------------------------
" Trigger relative line numbers in current buffer
if exists('&relativenumber')
  set relativenumber
  augroup WindowRNU
    auto!
    auto BufWinEnter,WinEnter,FocusGained * setlocal relativenumber
    auto WinLeave,FocusLost               * setlocal number
  augroup END
endif

let g:SuperTabCrMapping = 0
let g:LustyJugglerSuppressRubyWarning = 1
let g:NERDTreeWinPos = "right"
