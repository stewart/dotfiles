call pathogen#infect()          " Call pathogen
set noswapfile                  " Who needs swapfiles, anyways?
set nocompatible                " Don't want to be compatible with vi
filetype plugin indent on

" ----------------------------------------------------------
" Text Formatting
" ----------------------------------------------------------
set autoindent                  " automagically indent new lines
set smartindent                 " be smart about it
inoremap # X<BS>#
set wrap                        " wrap lines
set softtabstop=2               " four spaces? yeah right.
set shiftwidth=2                " see above.
set tabstop=2
set expandtab                   " tabs to spaces
set nosmarttab                  " fuck off, tabs
set formatoptions+=nr           " add support for numbered/bulleted lists and * comments
set virtualedit=block           " allow virtual edit in visual block
set clipboard=unnamed
set scrolljump=5
set scrolloff=5
set cursorline
set history=10000
set encoding=utf-8
set modelines=0
set ttyfast
set showbreak=↪
set splitbelow
set splitright

" ----------------------------------------------------------
" Interface
" ----------------------------------------------------------
set ruler                       " show the ruler at all times.
set noshowcmd                   " don't show incomplete commands
set lazyredraw                  " turn on lazy redraw
set number                      " turn on line numbers
set wildmode=list:longest,full
set wildmenu                    " turn on wildmenu
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,]      " backspace and cursor keys wrap to
set shortmess=filtIoOA          " shorten messages
set report=0                    " tell us about changes
set nostartofline               " don't jump to the start of line when scrolling

if has("gui_running")
  colorscheme solarized       " colorscheme
  let g:solarized_termcolors=256
  set background=dark
endif

set guifont=Inconsolata-dz\ for\ PowerLine:h14 " best goddamn terminal font around
set guioptions-=T                              " strip MacVim/GVim chrome
set guioptions-=m                              " ...
set guioptions=aAce                            " ...

set list
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮

set noerrorbells
set novisualbell
set noshowmatch                 " vim, kindly shut up about my >'s.
set t_vb=

set completeopt=longest,menuone,preview

" Resize splits when the window is resized
au VimResized * :wincmd =

" Statusline
set laststatus=2
let g:Powerline_symbols='fancy'

" Syntax hightlighing
syntax enable
syntax on

" Multi-line comments in PHP
au BufRead,BufNewFile *.php set comments=s1:/*,mb:*,ex:*/,://,:#

" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif

" ----------------------------------------------------------
" Remappings
" ----------------------------------------------------------

let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" gundo
nnoremap <Leader>u :GundoToggle<CR>

" yankring
nnoremap <silent> <Leader>y :YRShow<CR>

" change case
inoremap <C-u> <esc>mzgUiw`za

" keep the cursor in place while joining lines
nnoremap J mzJ`z

" split line
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" move the current line front and center
nnoremap <c-z> zvzz

" ; acts as : in normal mode:
nmap ; :

" Set newline commands to return to insert mode
nmap o o<Esc>
nmap O O<Esc>

" Change window splits easily
map <C-J> <C-w><C-j>
map <C-K> <C-w><C-k>
map <C-h> <C-w><C-h>
map <C-l> <C-w><C-l>

map <Leader>n :NERDTree<CR>
map <silent> <C-s> :NERDTreeClose<CR>:NERDTreeFind<CR>

" Shortcut for T-Comment
map <Leader>c <c-_><c-_>

" Write as sudo
cmap w!! %!sudo tee > /dev/null %

" Use space key to toggle folds
nnoremap <Space> za
vnoremap <Space> za

" Make find/replace easier
nnoremap <leader>s :%s//g<left>

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Centers search results
map N Nzz
map n nzz

" Clear search buffer on return
nnoremap <CR> :nohlsearch<cr>

" Open Markdown previews in Marked.app
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

" Charwise selection
nnoremap vv ^vg_

" Make finding marks easier
noremap ' `

" Insert mode completion
inoremap <c-l> <c-x><c-l>
inoremap <c-f> <c-x><c-f>

nnoremap L $

" Call the StripWhitespace function
map <Leader>w :call StripWhitespace ()<CR>

" C-TAB and C-SHIFT-TAB cycle tabs forward and backward
nmap <c-tab> :tabnext<cr>
imap <c-tab> <c-o>:tabnext<cr>
vmap <c-tab> <c-o>:tabnext<cr>
nmap <c-s-tab> :tabprevious<cr>
imap <c-s-tab> <c-o>:tabprevious<cr>
vmap <c-s-tab> <c-o>:tabprevious<cr>

" sane movement with wrap turned on
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk

" Alternate between two and four space indentation
nnoremap <leader>2 :setlocal shiftwidth=2 tabstop=2 softtabstop=2<cr>
nnoremap <leader>4 :setlocal shiftwidth=4 tabstop=4 softtabstop=4<cr>

" Select all
nnoremap <leader>a ggVG

" Map to switch between absolute and relative line numbers
nnoremap <C-n> :call NumberToggle()<cr>

map <leader>rf :call RenameFile()<cr>

" Make Y behave like other capitals
nnoremap Y y$

" fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

noremap <leader>v <C-w>v

" numbers as objects
onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>


" mappings for Steve Losh's AckMotion
nnoremap <silent> <leader>A :set opfunc=<SID>AckMotion<CR>g@
xnoremap <silent> <leader>A :<C-U>call <SID>AckMotion(visualmode())<CR>

nnoremap <bs> :Ack! '\b<c-r><c-w>\b'<cr>
xnoremap <silent> <bs> :<C-U>call <SID>AckMotion(visualmode())<CR>

" ----------------------------------------------------------
" Searching
" ----------------------------------------------------------
set incsearch              " do incremental searching
set hlsearch               " highlight searches
set ignorecase smartcase   " ignore case when searching, unless it contains uppercase characters
set gdefault               " i want global more often than not

" ----------------------------------------------------------
" Plugins
" ----------------------------------------------------------

" NERDTree
let NERDTreeShowHidden=0
let NERDTreeIgnore=['\.rbc$', '\~$', '.git/']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeWinPos = "right"
map <Leader>n :NERDTree<CR>

" LustyJuggler
let g:LustyJugglerAltTabMode = 1
noremap <silent> <Leader><Tab> :LustyJuggler<CR>

" Ctrlp
let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_max_files = 10000
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 20
let g:ctrlp_extensions = ['tag']

let g:ctrlp_prompt_mappings = {
\ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
\ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
\ 'PrtHistory(-1)':       ['<c-n>'],
\ 'PrtHistory(1)':        ['<c-p>'],
\ 'ToggleFocus()':        ['<c-tab>'],
\ }

let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

" ---------------------------------------------------------------------------
"  Functions
" ---------------------------------------------------------------------------

function! s:CopyMotionForType(type)
    if a:type ==# 'v'
        silent execute "normal! `<" . a:type . "`>y"
    elseif a:type ==# 'char'
        silent execute "normal! `[v`]y"
    endif
endfunction

function! s:AckMotion(type) abort
    let reg_save = @@

    call s:CopyMotionForType(a:type)

    execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"

    let @@ = reg_save
endfunction

" Strip whitespace in file
function! StripWhitespace ()
  exec ':%s/ \+$//g'
endfunction

" Toggle relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

" Rename Current File
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction

function! BufOnly(buffer, bang)
  if a:buffer == ''
    " No buffer provided, use the current buffer.
    let buffer = bufnr('%')
  elseif (a:buffer + 0) > 0
    " A buffer number was provided.
    let buffer = bufnr(a:buffer + 0)
  else
    " A buffer name was provided.
    let buffer = bufnr(a:buffer)
  endif

  if buffer == -1
    echohl ErrorMsg
    echomsg "No matching buffer for" a:buffer
    echohl None
    return
  endif

  let last_buffer = bufnr('$')

  let delete_count = 0
  let n = 1
  while n <= last_buffer
    if n != buffer && buflisted(n)
      if a:bang == '' && getbufvar(n, '&modified')
        echohl ErrorMsg
        echomsg 'No write since last change for buffer'
              \ n '(add ! to override)'
        echohl None
      else
        silent exe 'bdel' . a:bang . ' ' . n
        if ! buflisted(n)
          let delete_count = delete_count+1
        endif
      endif
    endif
    let n = n+1
  endwhile

  if delete_count == 1
    echomsg delete_count "buffer deleted"
  elseif delete_count > 1
    echomsg delete_count "buffers deleted"
  endif

endfunction

command! -nargs=? -complete=buffer -bang Bonly
    \ :call BufOnly('<args>', '<bang>')
command! -nargs=? -complete=buffer -bang BOnly
    \ :call BufOnly('<args>', '<bang>')
command! -nargs=? -complete=buffer -bang Bufonly
    \ :call BufOnly('<args>', '<bang>')
command! -nargs=? -complete=buffer -bang BufOnly
    \ :call BufOnly('<args>', '<bang>')


" ---------------------------------------------------------------------------
"  Quick Edits
" ---------------------------------------------------------------------------

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>et :vsplit ~/todo/todo.txt<cr>
nnoremap <leader>ez :vsplit ~/.localrc<cr>

" ---------------------------------------------------------------------------
"  Misc
" ---------------------------------------------------------------------------
" Trigger relative line numbers in current buffer
if exists('&relativenumber')
  set relativenumber
  augroup WindowRNU
    auto!
    auto BufWinEnter,WinEnter,FocusGained * setlocal relativenumber
    auto WinLeave,FocusLost               * setlocal number
  augroup END
endif

let g:SuperTabCrMapping = 0
let g:LustyJugglerSuppressRubyWarning = 1
let g:ragtag_global_maps = 1

nnoremap Ajj <nop>
nnoremap A<esc> <nop>
